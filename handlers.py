import random
import asyncio
import sqlite3
from aiogram import Router, F
from aiogram.filters import CommandStart, Command
from aiogram.types import Message, CallbackQuery
from keyboards import add_togame

router = Router()

active_games = {}  # {group_id: {"players": list_of_players, "skip_event": asyncio.Event()}}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
async def register_user(user_id: int, user_name: str, group_id: int, group_name: str):
    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()

            # –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã, –µ—Å–ª–∏ –∏—Ö –µ—â—ë –Ω–µ—Ç
            cursor.execute('''CREATE TABLE IF NOT EXISTS players (
                id INTEGER PRIMARY KEY,
                name TEXT NOT NULL,
                group_id INTEGER NOT NULL
            )''')

            cursor.execute('''CREATE TABLE IF NOT EXISTS groups (
                group_id INTEGER PRIMARY KEY,
                group_name TEXT,
                game_status TEXT DEFAULT 'inactive'
            )''')

            # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—É –∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            cursor.execute('''INSERT OR IGNORE INTO groups (group_id, group_name)
                              VALUES (?, ?)''', (group_id, group_name))
            cursor.execute('''INSERT OR REPLACE INTO players (id, name, group_id)
                              VALUES (?, ?, ?)''', (user_id, user_name, group_id))
            conn.commit()
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        raise


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@router.message(CommandStart())
async def start(message: Message):
    if message.chat.type not in ['group', 'supergroup']:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ /start –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    user_id = message.from_user.id
    user_name = message.from_user.first_name
    group_id = message.chat.id
    group_name = message.chat.title or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    try:
        await register_user(user_id, user_name, group_id, group_name)
        await message.answer(f"–í–∞—à–∏ –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã! –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ –≥—Ä—É–ø–ø–µ '{group_name}'.")
        print(f"New Player! ID: {user_id}, Group ID: {group_id}")
    except Exception as e:
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        print(e)


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "join"
@router.callback_query(F.data == 'join')
async def handle_add_to_game(callback: CallbackQuery):
    user_id = callback.from_user.id
    user_name = callback.from_user.first_name
    group_id = callback.message.chat.id
    group_name = callback.message.chat.title or "–ë–µ–∑ –∏–º–µ–Ω–∏"

    try:
        await register_user(user_id, user_name, group_id, group_name)
        await callback.message.answer(f"{user_name} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ!")
        await callback.answer()
    except Exception as e:
        await callback.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –≤ –∏–≥—Ä—É.", show_alert=True)
        print(e)

# –ö–æ–º–∞–Ω–¥–∞ /start_game –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∏–≥—Ä—ã
@router.message(Command('start_game'))
async def start_game(message: Message):
    if message.chat.type not in ['group', 'supergroup']:
        await message.answer("–ö–æ–º–∞–Ω–¥–∞ /start_game –¥–æ—Å—Ç—É–ø–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–∞—Ö.")
        return

    group_id = message.chat.id

    try:
        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute('SELECT game_status FROM groups WHERE group_id = ?', (group_id,))
            result = cursor.fetchone()

            if result and result[0] == "active":
                await message.answer("–ò–≥—Ä–∞ —É–∂–µ –∏–¥—ë—Ç!")
                return

            cursor.execute('UPDATE groups SET game_status = "active" WHERE group_id = ?', (group_id,))
            cursor.execute('SELECT id, name FROM players WHERE group_id = ?', (group_id,))
            players = cursor.fetchall()

            if len(players) < 2:
                await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –Ω–∞—á–∞–ª–∞ –∏–≥—Ä—ã.")
                return

            active_games[group_id] = {"players": [{"id": p[0], "name": p[1]} for p in players],
                                      "skip_event": asyncio.Event()}
            await message.answer("–ò–≥—Ä–∞ –Ω–∞—á–∞–ª–∞—Å—å!")
            asyncio.create_task(game_loop(group_id, message.bot))

    except Exception as e:
        print(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–≥—Ä—ã.")


# –ö–æ–º–∞–Ω–¥–∞ /stop_game –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –∏–≥—Ä—ã
@router.message(Command('stop_game'))
async def stop_game(message: Message):
    group_id = message.chat.id

    try:
        if group_id in active_games:
            del active_games[group_id]

        with sqlite3.connect('example.db') as conn:
            cursor = conn.cursor()
            cursor.execute('UPDATE groups SET game_status = "inactive" WHERE group_id = ?', (group_id,))
            conn.commit()

        await message.answer("–ò–≥—Ä–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞.")

    except Exception as e:
        print(e)
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ –∏–≥—Ä—ã.")


# –ò–≥—Ä–æ–≤–æ–π —Ü–∏–∫–ª
async def game_loop(group_id, bot):
    while group_id in active_games:
        game_data = active_games[group_id]
        players = game_data["players"]
        skip_event = game_data["skip_event"]

        if len(players) < 2:
            await bot.send_message(group_id, "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∏–≥—Ä–æ–∫–æ–≤ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –∏–≥—Ä—ã.")
            break

        asker, answerer = random.sample(players, 2)
        await bot.send_message(
            group_id,
            f"üé≤ –ò–≥—Ä–æ–∫ {asker['name']} –∑–∞–¥–∞—ë—Ç –≤–æ–ø—Ä–æ—Å '–ü—Ä–∞–≤–¥–∞ –∏–ª–∏ –¥–µ–π—Å—Ç–≤–∏–µ' –∏–≥—Ä–æ–∫—É {answerer['name']}!"
        )

        try:
            skip_event.clear()
            await asyncio.wait_for(skip_event.wait(), timeout=90)
        except asyncio.TimeoutError:
            pass

    if group_id in active_games:
        del active_games[group_id]


# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è –∑–∞–¥–µ—Ä–∂–∫–∏
@router.message(Command('skip'))
async def skip_delay(message: Message):
    group_id = message.chat.id

    if group_id in active_games:
        active_games[group_id]["skip_event"].set()
        await message.answer("–ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–ø—É—â–µ–Ω–∞. –°–ª–µ–¥—É—é—â–∏–π —Ä–∞—É–Ω–¥ –Ω–∞—á–∞–ª—Å—è!")


# –ö–æ–º–∞–Ω–¥–∞ /new_game —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
# –ö–æ–º–∞–Ω–¥–∞ /new_game —Å –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–æ–π
@router.message(Command('new_game'))
async def new_game(message: Message):
    await message.answer("–î–æ–±–∞–≤—å —Å–µ–±—è –≤ –∏–≥—Ä—É, –Ω–∞–∂–∞–≤ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=add_togame)
